조현영 저자의 node.js 책을 보고 정리하는 내용이다. 

www.yes24.com/Product/Goods/62597864

 
Node.js 교과서

 

Node.js는 Chrome V8 Javascript 엔진으로 빌드 된 javascript 런타임이다.

 노드는 자바스크립 런타임이다. 런타임은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경을 뜻한다.

따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있다. 쉽게 말해 노드는 자바스크립트 실행기라고 봐도 된다. 기존에는 자바스크립트 프로그램을 웹 브라우저 위에서만 실행할 수 있었다. 그러나 브라우저는 자바스크립트 런타임을 내장하고 있으므로 자바스크립트 코드를 실행할 수 있었다. 그러나 브라우저 외의 환경에서 자바스크립트를 실행하려는 시도가 여러번 있었으나, 실행속도의 문제로 큰 호응을 얻지 못했다. 그러나 2008년 구글이 V8엔진을 사용하여 크롬을 출시하자 이야기가 달라졌고,  V8엔진 기반의 노드 프로젝트가 시작된다.

 

 

특징 1) 이벤트 기반

 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식. 이벤트로는 클릭이나 네트워크 요청등이 있을 수 있다.

이벤트 기반 시스템에서는 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해야한다.

 예를 들어, 버튼을 클릭할 때 경고창을 띄우도록 설정하는것을 보자. 클릭 이벤트 리스너에 경고창을 띄우는 콜백 함수를 등록해주면 클릭 이벤트가 발생할 때마다 콜백 함수가 실행되어 경고창이 뜨는 것이다.

 

 노드도 이벤트 기반 방식으로 동작하므로, 이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백함수를 호출한다. 발생한 이벤트가 없거나 발생했던 이벤트를 다 처리하며느 노드는 다음 이벤트가 발생할 때까지 대기한다.

 

• 이벤트 루프: 이벤트 발생 시 호출할 놀백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당. 노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프라고 부른다.

 

• 백그라운드: setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳이다. 자바스크립트가 아닌 다른 언어로 작성된 프로그램이라 봐도된다. 여러작업이 동시에 실행될 수 있다.

 

• 태스크 큐: 이벤트 발생 후, 백그라운드에서 태스크 큐로 타이머나 이벤트 리스너의 콜백함수를 보낸다. 정새진 순서대로 콜백들이 줄을 서 있으므로 콜백 큐라고도 부른다. 콜백들은 보통 완료된 순서대로 줄을 서지만, 특정경우 순서가 바

뀌기도 한다.

 

 노드는 자바스크립트 코드의 맨 위부터 한줄씩 실행한다. 그러다 setTimeout(run, 3000) 같은 타이머 함수가 보이면 백그라운드로 보내고 타이머(3초 대기)가 실행된다. 타이머가 실행되면 바로 다음 함수가 실행되고, 타이머에 적힌 시간만큼 시간이 지나면 타이머 안에 있는 콜백함수(run)는 태스크 큐로 보내지고 함수가 실행된다. 

 

특징 2) 논 블로킹 I/O

 이벤트 루프를 잘 활용하면 오래걸리는 작업을 효육적으로 처리할 수 있다. 작업에는 두 가지 종류가 있다. 동시에 실행할 수있는 작업과 동시에 실행될 수 없는 작업이다. 기본적으로  작성한 자바스크립트 코드는 동시에 실행 될 수 없다. 하지만 자바스크립트 상에서 돌아가는 것이 아닌 I/O 작업 같은 것은 동시에 처리될 수 있다.

 I/O는 입력/출력이다. 파일 시스템 접근(파일 읽기, 쓰기, 폴더 만들기 등)이나 네트워크를 통한 요청 같은 작업이 I/O의 일종이다. 이러한 작업을 할 때 노드는 논 블로킹 방식으로 처리하는 방법을 제공한다. 논 블로킹이란 이전 작업이 완료될때까지 대기하지 않고 다음 작업을 수행하는 것이다. 노드는 I/O 작업을 백그라운드로 넘겨 동시에 처리한다.

 

특징 3) 싱글 스레드

 싱글 스레드는 스레드가 하나뿐인 것을 의미한다. 자바스크립트 코드가 동시에 실행될 수 없는 이유이기도 한다. 스레드를 이해하기 위해서는 프로세스부터 알아햐 한다. 

•프로세스는 운영체제에서 할당하는 작업의 단위이다. 노드나 웹 브라우저 같은 프로그램은 개별적인 프로세시이다. 프로세스 간에는 메모리등의 자원을 공유하지 않는다.

• 스레드는 프로세스 내에서 실행되는 흐름의 단위이다. 프로세스는 스레드를 여러 개 생성해 여러 작업을 동시에 처리할 수 있다. 스레드들은 부모 프로세스의 자원을 공유가능하며, 같은 주소의 메모리에 접근 가능해 데이터를 공유할 수 있다.

 

 노드는 싱글 스레드이다. 엄밀히 따지만, 프로세스의 하나에 여러 개의 스레드가 생성되지만, 직접 제어할 수 있는 것은 하나이다. 요청이 많이 들어와도 한번에 하나씩 요청을 처리한다. cpu 작업(연산작업이 많은 작업인 경우)이 많은 경우 워커 스레드를 사용하면, 멀티스레드도 사용할 수 있다.

 

노드가 채택하고 있는 방식은 싱글스레드, 논 블로킹이다. 비유를 하면 하나의 점원(스레드)이 여러 고객의 주문을 순서대로 먼저 받고, 요리(연산)가 완성되면 고객에게 순서대로 서빙한다. 

 

• 멀티스레싱과 멀티 프로세싱 비교

멀티 스레딩	멀티 프로세싱
하나의 프로세스 안에서 여러 개의 스레드 사용	여러 개의 프로세스 사용
cpu 작업이 많을때 사용	I/O 요청이 많을 때 사용
프로그래밍이 어려움	프로그램이 비교적 쉬움
-----------------------------------------------------------------------------------------------------------------------------------

서버로서의 노드

 

노드 서버 또한 노드와 마찬가지로 싱글 스레드, 논 블로킹 모델임으로 장단점을 공유한다.

서버에는 기본적으로 I/O요청이 많이 발생하므로 I/O 처리를 잘하는 노드 서버로 사용하면 좋다.

멀티 스레드 기능이 있긴 하지만, 이미지나 비디오처리, 대규모 데이터 처리처럼 cpu를 많이 사용하는 작업을 위한 서버로는 적합하지 않다. 그래도 노드로 하고 싶으면 AWS lambda나 구글 크라우드 펑션스 같은 서비스를 이용해 , CPU가 많이 사용하는 작업을 대신 처리하는것도 생각해본다.

 

노드의 가장 큰 장점은 자바스크립트를 사용하는 것이다. 웹 브라우저도 자바스크립트를 사용하므로 서버까지 노드를 사용하면, 개발 생성선이 획기적으로 높아진다. 물론 비동기에 강점을 보이는 언어나, nignx처럼 정적 파일 제공, 로드 밸런싱에 특화된 웹 서버에 비해는 느리긴하다. 또 다른 장점으론 요즘은 데이터를 XML대신 JSON으로 주고 받는데 JSON이 자바스크립트 형식이므로 노드에서 쉽게 처리할 수 있다.

 

장점	단점
멀티 스레드 방식에 비해 적은 컴퓨터 자원 사용	기본적으로 싱글 스레드라서 CPU코어를 하나만 사용
I/O 작업이 많은 서버로 적합	cpu 작업이 많은 서버로는 부적합
멀티 스레드 방식보다 쉬움	하나뿐인 스레드가 멈추지 않도록 관리필요
웹 서버가 내장되어 있음	서버 규모가 커졌을 때 서버를 관리하기 어려움
자바 스크립트를 사용함	어중간한 성능
 